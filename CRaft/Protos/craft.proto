syntax = "proto3";

option csharp_namespace = "CRaft";

package craft;

// https://raft.github.io/raft.pdf
service Craft {
  // Invoked by leader to replicate log entries; also used as heartbeat.
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesReply);
  // Invoked by candidates to gather votes.
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteReply);

  rpc InstallSnapshot (InstallSnapshotRequest) returns (InstallSnapshotReply);

  rpc SaveEntry (SaveEntryRequest) returns (SaveEntryReply);

  rpc PeerArrived (PeerArrivedRequest) returns (PeerArrivedReply);

  rpc GetNodeId (GetNodeIdRequest) returns (GetNodeIdReply);
}

// This will be variable for our service (I think).
message Entry {
	string payload = 1;
}

message SaveEntryRequest {
	Entry entry = 1;
}

message SaveEntryReply {
	bool saved = 1;
	string reason = 2;
	string leaderUri = 3;
}

message AppendEntriesRequest {
  uint64 term = 1;
  string leaderId = 2;
  uint64 prevLogIndex = 3;
  uint64 prevLogTerm = 4;
  uint64 leaderCommit = 5;
  repeated Entry entries = 6;
}

message AppendEntriesReply {
  uint64 term = 1;
  bool success = 2;
}

message RequestVoteRequest {
	uint64 term = 1;
	string candidateId = 2;
	uint64 lastLogIndex = 3;
	uint64 lastLogTerm = 4;
}

message RequestVoteReply {
	uint64 term = 1;
	bool voteGranted = 2;
}

message InstallSnapshotRequest {
	uint64 term = 1;
	string leaderId = 2;
	uint64 lastIncludedIndex = 3;
	uint64 offset = 4;
	bool done = 5;
	bytes data = 6;
}

message InstallSnapshotReply {
	uint64 term = 1;
}

message PeerArrivedRequest {
	string peerId = 1;
	string peerUri = 2;
}

message PeerArrivedReply {
	bool stored = 1;
}

message GetNodeIdRequest {}
message GetNodeIdReply {
	string nodeId = 1;
}